#!usr/bin/env python
# -*- coding:utf-8 -*-
# author: sfhong2020 time:2020/4/27 10:08


# 如果做多了二分查找的题，这道题应该会有思路。
# 我们二分查找的时候，关键是要抓到施以查找的变量。即我们的left,right 和 mid 表示的是什么。
# 对于简单题，往往就是列表的一项。比如对一个排序好的列表找到一个相应的值的位置，那么我们要施以查找的变量就是列表的下标，而缩小范围的依据就是列表的值。
# 对于复杂的题，往往这个施以查找的变量会比较难抓。它往往不是列表里的一个项，而是一个要输出的值或判断依据做相应的变换。
# 难点就在于划分出哪些是施以查找的变量，哪些是这些变量的更新准则。
# 针对这题的二分查找思路
# 那么，对于这题，施以查找的变量是什么呢？
# 我们注意到题目里说的m个子数组各自和的最大值最小。
# 这是一个判断依据，也可以作为我们的施以查找的变量。
# 显然，如果对这个数组，每个数单独成一数组，那么子数组的各自和的最大值，就是所有数中的最大值。
# 而如果对这个数组不分组，那么子数组的各自和的最大值就是这个数组的和。
# 这两个值对应的就是 left 和 right，即全分组与不分组的结果。
# 套有我认为非常不错的这套「二分查找模板」，可以很容易写出这样的代码。
# 更新依据
# 刚刚的注释里写道 排除右侧的条件
# 怎样排除左侧的条件呢？即，给定一个左，右，和中间值，如何判断我们需要的最大值在中间和左边围起来的范围内呢？
# 我们假设给定了mid，那么需要判断，如果以mid作为最大值，能形成几组，然后和给定的m值作对比。显然，如果这个mid越大，要分出来的组数越少。
# 如果形成的组数比要求的多，说明这个给定的mid太小了，要扩大，而如果形成的组数太少了，说明给定的mid太大了，要缩小。
# 而如果相等呢？我们假设有这么一个题目，给定列表[5,123]和m = 2来找出最大值，假如在二分中选择了124，这样子只能分成两个组，
# 而显然124这个数不是正确答案，正确答案是123，所以相等的时候，我们认为这个查找值mid应该缩小。
# 如果设定一个cnt变量记录分组数，即可写成这样的形式。

# 二分法找到mid，缩小范围的条件。以全分组和不分组作为边界。
# 如果tmp之和大于mid，说明tmp应该要丢弃最后加的值，同时这个数作为新组的开头；反之，应继续把后面的值加进来，直至遍历完毕！
# 如果分组数太多说明mid过小，应增大；如果分组数太少说明mid过小，应增大。

def splitArray(nums, m):
    left = max(nums)
    right = sum(nums)
    while left < right:
        mid = (left+right)//2
        tmp_sum, group = 0, 1
        for i in range(len(nums)):
            if tmp_sum+nums[i] > mid:
                group += 1
                tmp_sum = nums[i]
            else:
                tmp_sum += nums[i]
        if group <= m:
            right = mid
        else:
            left = mid+1

    return left

print(splitArray(nums = [7,2,5,10,8],m = 2))